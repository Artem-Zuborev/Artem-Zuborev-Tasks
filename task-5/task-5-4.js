1 - '0' + 2
// Строка "0" преобразуется к числу 0
// 1 - 0 + 2 = 3


1 - '-0' + 2
// 1 - '-0', где '-0' преоразуется к числу 0
// 1 - 0 + 2 = 3


1 - '-0-' + 'NaN'
// '-0-' к числу привести не удастся => 1 - '-0-' => NaN
// NaN + "NaN" => "NaNNaN"


'b' + [NaN + 'ba', 'CC'] - {};
// В массиве NaN приводится к строке => ['NaNba', 'CC']
// Массив приводится к строке 'NaNba, CC'
// Канкатинация строк 'b' + ['NaNba', 'CC'] => 'bNaNba, CC'
// При разности не числовых значений будет NaN


[] + (() => { });
// [] преобразуется в строку ""
// (()=>{}) => ()=>{}
// "" + ()=>{} => "()=>{}"


[] + (() => ({}));
//  []=>""
//  (()=>({})) => ()=>({})
//  "" + ()=>({}) => "()=>({})"


[] + (() => ({}))();
// [] => ""
// (()=>({}))() => {}
//  [] + {} => "" + [object Object] => "[object Object]"

[] + (() => new Object(123))()
// (() => new Object(123))() => Number {123}
// Number {123} будет преобразован к примитиву 123
//  [] => ""
// "" + 123 => "123"

{ } + (() => new Object(123))()
    // {} воспринимается как блок кода
    // (() => new Object(123))() => Number {123} => 123
    // Результат 123



    (() => new Object(123))() + {}
        // левая часть будет приведена к примитиву 123
        // правая к "[object Object]"
        // 123 + "[object Object]" => "123[object Object]"


        ({}).valueOf() + 1
// ({}).valueOf() => {} => "[object Object]"
// "[object Object]" + 1 => "[object Object]1"


{ } + 2
// {} => пустой блок кода
// результат 2



typeof ({}).valueOf() + 2
    // функция typeof ({}) вернет строку "object"
    // метод .valueOf() для строки возвращает строку "object"
    // "object" + 2 => "object2"


    + {}
    // Фигурные скобки воспринимаются как объект и после преобразования вернется строка "[object Object]"
    // Унарный плюс преобразует строку в число, но в данном случае это не возможно, поэтому результат будет NaN

    + {} + []
    // + {} как в примере выше будет равнятся NaN
    //  [] преобразуется к строке ""
    // NaN + "" => "NaN"


    + []
    // [] преобразуется к строке ""
    // унарный плюс преобразует пустую строку в 0

    + [] + {}
    // + [] вернет 0
    // Фигурные скобки вернут строку '[object Object]'
    // 0 + "[object Object]" => "0[object Object]"

    + [10, 1] + {}
// массив [10, 1] преобразуется в строку "10,1"
// с помощью унарного плюса попытка привести строку к числу, но это не получится в итоге будет NaN
// Фигурные скобки вернут строку '[object Object]'
// NaN + '[object Object]' => 'NaN[object Object]'

{ } +[10]
// {} воспринимается как блок кода
// +[10] => 10